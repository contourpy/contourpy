name: Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    name: Test ${{ matrix.python-version }} ${{ matrix.os }} ${{ matrix.debug == 1 && 'debug' || '' }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        debug: [0]
        test-image: [1]
        include:
          # Add debug build and test to matrix.
          - os: ubuntu-latest
            python-version: '3.10'
            debug: 1
            test-image: 1
          # PyPy only tested on ubuntu for speed, without image tests.
          - os: ubuntu-latest
            python-version: 'pypy3.7'
            debug: 0
            test-image: 0
          - os: ubuntu-latest
            python-version: 'pypy3.8'
            debug: 0
            test-image: 0
          - os: ubuntu-latest
            python-version: 'pypy3.9'
            debug: 0
            test-image: 0
          # Pre-release Python version without image tests.
          - os: ubuntu-latest
            python-version: '3.11-dev'
            debug: 0
            test-image: 0
          - os: macos-latest
            python-version: '3.11-dev'
            debug: 0
            test-image: 0
          - os: windows-latest
            python-version: '3.11-dev'
            debug: 0
            test-image: 0

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install contourpy
        shell: bash
        run: |
          if [[ ${{ matrix.debug }} == 0 ]];
          then
            if [[ ${{ matrix.test-image }} == 1 ]];
            then
              echo "Install with full test dependencies"
              python -m pip install -ve .[test]
            else
              echo "Install with minimal test dependencies"
              python -m pip install -ve .[test-minimal]
            fi
          else
            echo "Install in debug mode with test dependencies"
            CONTOURPY_DEBUG=1 CONTOURPY_CXX11=1 python -m pip install -ve .[test]
          fi
          python -m pip list

      - name: Install cppcheck
        if: runner.os == 'Linux'
        run: |
          CPPCHECK_VERSION=2.9
          CPPCHECK_TGZ=$CPPCHECK_VERSION.tar.gz
          cd $RUNNER_TEMP
          wget --no-verbose https://github.com/danmar/cppcheck/archive/refs/tags/$CPPCHECK_TGZ
          tar xzf $CPPCHECK_TGZ
          cd cppcheck-$CPPCHECK_VERSION
          sudo make install MATCHCOMPILER=yes FILESDIR=/usr/share/cppcheck CXXFLAGS="-O2 -DNDEBUG" -j 2

      - name: Run tests
        shell: bash
        run: |
          if [[ ${{ matrix.test-image }} == 1 ]];
          then
            echo "Run all tests"
            python -m pytest -v tests/
          else
            echo "Run only tests that do not generate images"
            python -m pytest -v tests/ -k "not image"
          fi

      - name: Collect test image failures
        if: always()
        shell: bash
        run: |
          if [[ -e result_images ]];
          then
            DIR="test-artifacts/${{ matrix.os }}_${{ matrix.python-version }}_${{ matrix.debug == 1 && 'debug' || '' }}"
            mkdir -p ${DIR}
            mv result_images/* ${DIR}/
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-artifacts
          path: test-artifacts/
